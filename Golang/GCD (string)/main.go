//Это рекурсивный алгоритм имеющий схожесть с GSD (наибольший общий делитель), а конкретно на алгоритм Эвклида
//Задача: даны два string. Необходимо определить, явлется ли str2 "делителем" для str1, то есть str1 = str2 + str2 + str2.
//Требуется вернуть делитель если он есть или пустую строку

//На примере ABCABC и ABC. ABC является "делителем" для ABCABC

//Суть работы алгоритма:
//Используем рекурсию. Базовый случай - проверяем равны ли слова str1 и str2. Если они равны, то это значит что слова лделяться без остатка
//и мы должны вернуть любое из них в качестве остатка. Если слова не равные, значит как бы делим большее слово, то есть убираем у большего
//слова первые len(str2) символов и пробуем снова. В случае если мы поймем что слова содержат разные символы - возвращаем пустую строку

package main

import "fmt"

func main() {
	gcd := gcdOfStrings("ABCABC", "ABC")
	fmt.Println(gcd)
}

func gcdOfStrings(str1 string, str2 string) string {
	//БАЗОВЫЙ СЛУЧАЙ РЕКУРСИИ
	if str1 == str2 {
		return str1
	}

	if len(str2) > len(str1) {
		str1, str2 = str2, str1
	}

	if str1[:len(str2)] != str2 {
		return ""
	}
	//БАЗОВЫЙ СЛУЧАЙ РЕКУРСИИ КОНЕЦ

	//РЕКУРСИВНЫЙ СЛУЧАЙ
	return gcdOfStrings(str1[len(str2):], str2)
}
